{% extends 'SmartProjectBootstrapBundle::base.html.twig' %}

{% block head_style %}
    {{ parent() }}
    {% stylesheets
    '@SmartProjectFrontBundle/Resources/public/css/default.css' %}
    <link href="{{ asset_url }}" type="text/css" rel="stylesheet"/>
    {% endstylesheets %}
{% endblock head_style %}

{% block navbar %}
    {% embed '@MopaBootstrap/Navbar/navbar.html.twig' with { fixedTop: true } %}
        {% block brand %}
            <a class="navbar-brand visible-lg visible-md visible-xs" href="{{ path('smartproject_front_index_index') }}">SmartProject</a>
        {% endblock %}

        {% block menu %}{% spaceless %}
            {{ mopa_bootstrap_menu('main') }}
            {{ mopa_bootstrap_menu('user') }}

            <!-- The drop down menu -->
            <!--ul class="nav navbar-nav pull-right">
                <li class="dropdown">
                    <a class="dropdown-toggle" href="#" data-toggle="dropdown">Sign In <strong class="caret"></strong></a>
                    <div class="dropdown-menu" style="padding: 15px; padding-bottom: 0px;">
                    </div>
                </li>
            </ul-->
        {% endspaceless %}{% endblock %}
    {% endembed %}
{% endblock navbar %}

{% block headline %}The Basic Layout{% endblock headline %}

{% block body_end_before_js_content %}
    <p class="text-muted">&copy; Copyright 2014 SmartProject</p>
{% endblock body_end_before_js_content %}

{% block foot_script %}
    {{ parent() }}

    <script type="text/javascript">
        (function($){
            String.prototype.repeat = function(count) {
                if (count < 1) return '';
                var result = '', pattern = this.valueOf();
                while (count > 0) {
                    if (count & 1) result += pattern;
                    count >>= 1, pattern += pattern;
                }
                return result;
            };

            $.fn.serializeObject = function(){

                var self = this,
                        json = {},
                        push_counters = {},
                        patterns = {
                            "validate": /^[a-zA-Z][a-zA-Z0-9_]*(?:\[(?:\d*|[a-zA-Z0-9_]+)\])*$/,
                            "key":      /[a-zA-Z0-9_]+|(?=\[\])/g,
                            "push":     /^$/,
                            "fixed":    /^\d+$/,
                            "named":    /^[a-zA-Z0-9_]+$/
                        };

                this.build = function(base, key, value){
                    base[key] = value;
                    return base;
                };

                this.push_counter = function(key){
                    if(push_counters[key] === undefined){
                        push_counters[key] = 0;
                    }
                    return push_counters[key]++;
                };

                $.each($(this).serializeArray(), function(){

                    // skip invalid keys
                    if(!patterns.validate.test(this.name)){
                        return;
                    }

                    var k,
                            keys = this.name.match(patterns.key),
                            merge = this.value,
                            reverse_key = this.name;

                    while((k = keys.pop()) !== undefined){

                        // adjust reverse_key
                        reverse_key = reverse_key.replace(new RegExp("\\[" + k + "\\]$"), '');

                        // push
                        if(k.match(patterns.push)){
                            merge = self.build([], self.push_counter(reverse_key), merge);
                        }

                        // fixed
                        else if(k.match(patterns.fixed)){
                            merge = self.build([], k, merge);
                        }

                        // named
                        else if(k.match(patterns.named)){
                            merge = self.build({}, k, merge);
                        }
                    }

                    json = $.extend(true, json, merge);
                });

                return json;
            };
        })(jQuery);

        $(document).ready(function () {
            $('[data-toggle="tooltip"]').tooltip();
            $('[data-toggle="popover"]').popover();
            $('.btn-group .btn').button();

            {% for flashType, flashMessages in app.session.flashbag %}
            {% for flashMessage in flashMessages %}
            $.bootstrapGrowl("{{ flashMessage|escape }}", {
                ele: 'body',
                type: '{{ flashType }}',
                align: 'right',
                width: 300, // 'auto'
                offset: {from: 'bottom', amount: 20},
                delay: 4000,
                stackup_spacing: 10,
                allow_dismiss: true
            });
            {% endfor %}
            {% endfor %}

            // Select2 fix
            // cf : http://stackoverflow.com/a/19574076/1931915
            $.fn.modal.Constructor.prototype.enforceFocus = function() {};
        });
    </script>
{% endblock foot_script %}

{% block content_sidebar %}
{% endblock %}